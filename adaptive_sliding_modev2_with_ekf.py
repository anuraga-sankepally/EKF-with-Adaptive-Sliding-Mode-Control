# -*- coding: utf-8 -*-
"""Adaptive_sliding modev2_with EKF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHbnG8qDobRliNeZJ2yeug6ak6jDQXeW

# Author : Anuraga Sankepally 
# Date : May 20, 2021
# Description : Adaptive control of quadrotor with wind disturbances

# Import Libraries
"""

# importing libraries
from math import cos, sin, sqrt
import numpy as np
from random import random
import scipy.signal as signal
import scipy.linalg as linalg
from mpl_toolkits.mplot3d import Axes3D
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt
from matplotlib import animation
from matplotlib.patches import Circle
from IPython.display import HTML
import math
import random

"""# parameters

## initial states
"""

#States

x1 = 0 #roll
x2 = 0 #roll rate
x3 = 0 #pitch
x4 = 0 #pitch rate
x5 = 0 #yaw
x6 = 0 #yaw rate
x7 = 0 #pn
x8 = 0 #pn-vel
x9 = 0 #pe-pos
x10 = 0 #pe-vel
x11 = 0 #pd-pos
x12 = 0 #pd-vel

states = np.array([x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12])

"""## estimator params"""

x1hat = 0
x2hat = 0
x3hat = 0
x4hat = 0
x5hat = 0
x6hat = 0
x7hat = 0
x8hat = 0
x9hat = 0
x10hat = 0
x11hat = 0
x12hat = 0


global xhat
global Pt

xhat= np.array([[x1hat, x2hat, x3hat, x4hat,x5hat, x6hat, x7hat, x8hat, x9hat, x10hat, x11hat, x12hat]],dtype=float).T

Pt = np.identity(12)

Qu = np.zeros([12,12])
Qu[0,0] = 0.8
Qu[1,1] = 0.8
Qu[2,2] = 0.8
Qu[3,3] = 0.8
Qu[4,4] = 0.8
Qu[5,5] = 0.8
Qu[6,6] = 0.8
Qu[7,7] = 0.8
Qu[8,8] = 0.8
Qu[9,9] = 0.8
Qu[10,10]= 0.8
Qu[11,11] = 0.8

Ru = np.array([[0.1]])

###........landmarks
LN = 5
pn_l = np.array([1.0, 0.5, -1.0, 1.0, 1.0],dtype = float)
pe_l = np.array([1.5, -1.0, 1.4, 1.2, 2],dtype = float)
pd_l = np.array([3.0, 6.0, 10.4, 15.2, 20.0],dtype = float)

# estimator params

var_gyro = 0.1
var_acc = 0.1
var_range = 0.01

"""##Tuning parameters


"""

c1 = 0.5
k1_u1= 1.5
c2 = 0.5
k1_u2 = 1.5
c3 = 0.5
k1_u3 = 0.9

k1_x =2.8
k2_x =2.8

k3_y=5
k4_y=5

k5_z=0.9
k6_z=0.9

"""## Data params

"""

dx = 0.25
dy = 0.25
dz = 0.25
d_phi = 0.2
d_theta = 0.2
d_psi = 0.2
m = 1
g = 9.8
Jx = 0.114700 #moi wrt x
Jy = 0.057600 #moi wrt y
Jz = 0.171200 #moi wrt z
Jr = sqrt(Jx*Jx+Jy*Jy+Jz*Jz)

a1 = (Jy-Jz)/Jx
a2 = Jr/Jx
a3 = d_phi/Jx
a4 = (Jz-Jx)/Jy
a5 = Jr/Jy
a6 = d_theta/Jy
a7 = (Jx-Jy)/Jz
a8 = d_psi/Jz
a9 = dx/m
a10 = dy/m
a11 = dz/m

w_bar = 0.6
h = 100

dt = 0.1
Tfinal = 40
Ts = dt
Tsteps = Tfinal/Ts # number of frames
frames = int(Tsteps)

"""## adaptive gains - gammas"""

gamma_u1 = 0.5
gamma_u2 = 0.5
# g_u3 = 1

gamma_x = 0.9
gamma_y = 0.9
gamma_z = 0.8

## wind disturbances
Fx = 1
Fy = 1

Tau1_hat = 2
Tau2_hat = 2
# Tau3 = 1

Fx_hat = 1
Fy_hat = 1
# Fz_hat = 1


# adap = np.array([Tau1_hat, Tau2_hat, Tau3_hat, Fx_hat, Fy_hat])

adap = np.array([Tau1_hat, Tau2_hat,Fx_hat, Fy_hat])

"""# Data collection"""

x1_data = []
x2_data = []
x3_data = []
x4_data = []
x5_data = []
x6_data = []
x7_data = []
x8_data = []
x9_data = []
x10_data = []
x11_data = []
x12_data = []

x_r_data = []
y_r_data = []
z_r_data = []
psi_r_data = []

x1d_data = []
x3d_data = []

U1_data = []
U2_data = []
U3_data = []
U4_data = []

Tau1_hat_data = []
Tau2_hat_data = []
Fxhat_data = []
Fyhat_data = []

# estimated states
x1hat_data = []
x2hat_data = []
x3hat_data = []
x4hat_data = []
x5hat_data = []
x6hat_data = []
x7hat_data = []
x8hat_data  = []
x9hat_data  = []
x10hat_data  = []
x11hat_data = []
x12hat_data =[]

# covariancce bounds
cov_x1_data = []
cov_x2_data = []
cov_x3_data = []
cov_x4_data = []
cov_x5_data = []
cov_x6_data = []
cov_x7_data = []
cov_x8_data = []
cov_x9_data = []
cov_x10_data = []
cov_x11_data = []
cov_x12_data = []

#3 sigma bounds
cov3_x1_data = []
cov3_x2_data = []
cov3_x3_data = []
cov3_x4_data = []
cov3_x5_data = []
cov3_x6_data = []
cov3_x7_data = []
cov3_x8_data = []
cov3_x9_data = []
cov3_x10_data = []
cov3_x11_data = []


cov3x1_data_2 = []
cov3x2_data_2 = []
cov3x3_data_2 = []
cov3x4_data_2 = []
cov3x5_data_2 = []
cov3x6_data_2 = []
cov3x7_data_2 = []
cov3x8_data_2 = []
cov3x9_data_2 = []
cov3x10_data_2 = []
cov3x11_data_2 = []
cov3x12_data_2 = []

#error states
ex1_data = []
ex2_data = []
ex3_data = []
ex4_data = []
ex5_data = []
ex6_data = []
ex7_data = []
ex8_data = []
ex9_data = []
ex10_data = []
ex11_data = []
ex12_data = []

Sk_data =[]
Sk1_data=[]
one_data = []

"""# Rotation matrix"""

# Rotational Matrix to convert body frame to inertial frame
def rot_mat_bod2veh(phi, theta, psi):
    R_b_v=np.array([[cos(theta)*cos(psi), sin(phi)*sin(theta)*cos(psi)-cos(phi)*sin(psi), cos(phi)*sin(theta)*cos(psi)+sin(phi)*sin(psi)],
                    [cos(theta)*sin(psi), sin(phi)*sin(theta)*sin(psi)+cos(phi)*cos(psi), cos(phi)*sin(theta)*sin(psi)-sin(phi)*cos(psi)],
                    [-sin(theta),         sin(phi)*cos(theta),                            cos(phi)*cos(theta)]])
    return R_b_v

# Matrix to orient ned to xyz
def axes_ned2yxz():
  A_ned = [[0, 1, 0],
           [1, 0, 0],
           [0, 0, -1]]
  return A_ned

"""# Reference trajectory"""

def trajectory(t):

  a = 1.5
  b = 0.75
  c = 0.5
  n = -0.75
  T1 = 10
  w1 = 2 * np.pi/T1
  w2 = w1/2
  w3 = w1

  i = t
  y_r = np.array([a * np.cos(w2*i), b * np.sin(w1*i), n + c * np.sin(w3*i), np.pi/4 ])

  y_rdot = np.array([-a*w2*np.sin(w2*i), b*w1*np.cos(w1*i), c*w3*np.cos(w3*i), 0])

  y_rddot = np.array([-a* w2 *w2 * np.cos(w2*i), -b * w1 * w1 * np.sin(w1*i), -c * w3 * w3 * np.sin(w3*i), 0])

  x_r = a * np.cos(w2*i)
  x_r_dot = -a*w2*np.sin(w2*i)
  x_r_ddot = -a* w2 *w2 * np.cos(w2*i)

  y_r = b * np.sin(w1*i)
  y_r_dot = b*w1*np.cos(w1*i)
  y_r_ddot = -b * w1 * w1 * np.sin(w1*i)

  z_r =  c*w3*np.cos(w3*i)
  z_r_dot = c*w3*np.cos(w3*i)
  z_r_ddot = c*w3*np.cos(w3*i)

  psi_r = np.pi/4
  psi_r_dot = 0
  psi_r_ddot = 0

  x_ref = np.array([x_r, x_r_dot, x_r_ddot])
  y_ref = np.array([y_r, y_r_dot, y_r_ddot])
  z_ref = np.array([z_r, z_r_dot, z_r_ddot])
  psi_ref = np.array([psi_r, psi_r_dot, psi_r_ddot])

  # x_r_data.append(x_r)
  # y_r_data.append(y_r)
  # z_r_data.append(z_r)
  # psi_r_data.append(psi_r)

  return x_ref, y_ref, z_ref, psi_ref

"""# Quadrotor dynamics

"""

def quad_dyna(t, y, x1_d, x3_d,psi_ref, v2, v4, v6):
  x1 = y[0]
  x2 = y[1]
  x3 = y[2]
  x4 = y[3]
  x5 = y[4]
  x6 = y[5]
  x7 = y[6]
  x8 = y[7]
  x9 = y[8]
  x10 = y[9]
  x11 = y[10]
  x12 = y[11]

  e1_dot = x1_d[1] - x2
  e1 = x1_d[0] - x1
  s1 = e1_dot + c1*e1
  x1dot = x2
  x2dot = x1_d[2] + c1*e1_dot + k1_u1*np.sign(s1)

  e3 = x3_d[0] - x3
  e3_dot = x3_d[1] - x4
  s2 = e3_dot + c2*e3
  x3dot = x4
  x4dot = x3_d[2] + c2*e3_dot + k1_u2*np.sign(s2)

  e5 = psi_ref[0] - x5
  e5_dot = psi_ref[1] - x6
  s3 = e5_dot + c3*e5
  x5dot = x6
  x6dot = psi_ref[2] + c3*e5_dot + k1_u3*np.sign(s3)

  x7dot = x8
  x8dot = v2 - a9*x8
  x9dot = x10
  x10dot = v4 -a10*x10
  x11dot = x12
  x12dot = -g + v6 - a11*x12

  return x1dot, x2dot, x3dot, x4dot, x5dot, x6dot, x7dot, x8dot, x9dot, x10dot, x11dot, x12dot

"""# adaptive controllers

## attitude control
"""

def attitude(states, adap, x1d, x3d, psi_ref):
  x1 = states[0]
  x2 = states[1]
  x3 = states[2]
  x4 = states[3]
  x5 = states[4]
  x6 = states[5]
  x7 = states[6]
  x8 = states[7]
  x9 = states[8]
  x10 = states[9]
  x11 = states[10]
  x12 = states[11]

  Tau1_hat = adap[0]
  Tau2_hat = adap[1]
  Fx_hat = adap[2]
  Fy_hat = adap[3]

  x1r = x1d[0]
  x1r_dot = x1d[1]
  x1r_ddot = x1d[2]

  x3r = x3d[0]
  x3r_dot = x3d[1]
  x3r_ddot = x3d[2]

  x5r = psi_ref[0]
  x5r_dot = psi_ref[1]
  x5r_ddot = psi_ref[2]

  # attitude control inputs
  ##...phi
  e1_dot = x1d[1] - x2
  e1 = x1d[0] - x1
  s1 = e1_dot + c1*e1
  U1 = x1d[2] + c1*e1_dot - (a1*x4*x6+a2*w_bar*x4-a3*x2) + k1_u1*np.sign(s1) -Tau1_hat

  e3 = x3d[0] - x3
  e3_dot = x3d[1] - x4
  s2 = e3_dot + c2*e3
  U2 = x3d[2] + c2*e3_dot - (a4*x2*x6+a5*w_bar*x2-a6*x4) + k1_u2*np.sign(s2)- Tau2_hat

  e5 = psi_ref[0] - x5
  e5_dot = psi_ref[1] - x6
  s3 = e5_dot + c3*e5
  U3 = psi_ref[2] + c3*e5_dot - (a7*x2*x4-a8*x6) + k1_u3*np.sign(s3)


  return U1, U2, U3

"""## position controller"""

def position(states,adap,x_ref, y_ref, z_ref):
  x1 = states[0]
  x2 = states[1]
  x3 = states[2]
  x4 = states[3]
  x5 = states[4]
  x6 = states[5]
  x7 = states[6]
  x8 = states[7]
  x9 = states[8]
  x10 = states[9]
  x11 = states[10]
  x12 = states[11]

  Tau1_hat = adap[0]
  Tau2_hat = adap[1]

  Fxhat = adap[2]
  Fyhat = adap[3]


  # reference traj
  x7r = x_ref[0]
  x7r_dot = x_ref[1]
  x7r_ddot = x_ref[2]

  x9r = y_ref[0]
  x9r_dot = y_ref[1]
  x9r_ddot = y_ref[2]

  x11r = z_ref[0]
  x11r_dot = z_ref[1]
  x11r_ddot = z_ref[2]

  ##
  #position x
  z7 = x7r - x7
  z7_dot = x7r_dot - x8
  v1 = x7r_dot + k1_x*z7
  sp1 = v1 - x8
  v2 = z7 + x7r_ddot + k1_x*z7_dot + a9*x8 + k2_x*sp1 + Fx
  v2hat = z7 + x7r_ddot + k1_x*z7_dot + a9*x8 + k2_x*sp1 + Fxhat

  ## position y
  z9 = x9r - x9
  z9_dot = x9r_dot - x10
  v3 = x9r_dot + k3_y*z9
  sp2 = v3 - x10
  v4 = z9 + x9r_ddot + k3_y*z9_dot + a10*x10 + k4_y*sp2 + Fy
  v4hat = z9 + x9r_ddot + k3_y*z9_dot + a10*x10 + k4_y*sp2 + Fyhat

  ##position z
  z11 = x11r - x11
  z11_dot = x11r_dot - x12
  v5 = x11r_dot + k5_z*z11
  sp3 = v5 - x12
  v6 = z11 + x11r_dot + k5_z*z11_dot + g + a11*x12 + k6_z*sp3
  # v6hat= z11 + x11r_dot + k5_z*z11_dot + g + a11*x12 + k6_z*sp3


  return v2, v4, v6, v2hat,v4hat

"""# Arithmatic inverter"""

def inverter(t,states, adap):
  x1 = states[0]
  x2 = states[1]
  x3 = states[2]
  x4 = states[3]
  x5 = states[4]
  x6 = states[5]
  x7 = states[6]
  x8 = states[7]
  x9 = states[8]
  x10 = states[9]
  x11 = states[10]
  x12 = states[11]

  Tau1_hat = adap[0]
  Tau2_hat = adap[1]
  Fxhat = adap[2]
  Fyhat = adap[3]

  a = 1.5
  b = 0.75
  c = 0
  n = -0.75

  T1 = 10
  w1 = 2 * np.pi/T1
  w2 = w1/2
  w3 = w1

  x1d = np.arctan2(-1.41421356237309*Fyhat + a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - 1.41421356237309*a10*x10 + 1.41421356237309*b*w1**2*sin(t*w1) - 1.41421356237309*b*sin(t*w1) - 1.41421356237309*k3_y*(b*w1*cos(t*w1) - x10) - 1.41421356237309*k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + 1.41421356237309*x9, 1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))

  x1d_dot = 1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*b*k3_y*w1**2*sin(t*w1) + 1.41421356237309*b*w1**3*cos(t*w1) - 1.41421356237309*b*w1*cos(t*w1) - 1.41421356237309*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2) + (1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3))) + 0.353553390593274*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1))*(1.41421356237309*Fyhat - a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*a10*x10 - 1.41421356237309*b*w1**2*sin(t*w1) + 1.41421356237309*b*sin(t*w1) + 1.41421356237309*k3_y*(b*w1*cos(t*w1) - x10) + 1.41421356237309*k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - 1.41421356237309*x9)/(2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2)

  x1d_ddot = 1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*b*k3_y*w1**2*sin(t*w1) + 1.41421356237309*b*w1**3*cos(t*w1) - 1.41421356237309*b*w1*cos(t*w1) - 1.41421356237309*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2) + 1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(2*a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + a*(-c*k5_z*w3**3*cos(t*w3) - 2*c*w3**3*cos(t*w3) + k6_z*(-c*k5_z*w3**3*cos(t*w3) - c*w3**3*cos(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(a*k1_x*w2**3*sin(t*w2) + a*w2**4*cos(t*w2) - a*w2**2*cos(t*w2) + k2_x*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(2*c*k5_z*w3**2*sin(t*w3) + 4*c*w3**2*sin(t*w3) - 2*k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**3 + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (c*k5_z*w3**3*cos(t*w3) + 2*c*w3**3*cos(t*w3) - k6_z*(-c*k5_z*w3**3*cos(t*w3) - c*w3**3*cos(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**3*cos(t*w1) + b*w1**4*sin(t*w1) - b*w1**2*sin(t*w1) + k4_y*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*b*k3_y*w1**3*cos(t*w1) - 1.41421356237309*b*w1**4*sin(t*w1) + 1.41421356237309*b*w1**2*sin(t*w1) - 1.41421356237309*k4_y*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1)))/(2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2) + 0.353553390593274*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*b*k3_y*w1**2*sin(t*w1) + 1.41421356237309*b*w1**3*cos(t*w1) - 1.41421356237309*b*w1*cos(t*w1) - 1.41421356237309*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/((2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2)*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)) + 0.353553390593274*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-2*c*k5_z*w3**2*sin(t*w3) - 4*c*w3**2*sin(t*w3) + 2*k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11) - 1.0*a**2*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - 2.0*(1.4142135623731*a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.4142135623731*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 2*b*k3_y*w1**2*sin(t*w1) + 2*b*w1**3*cos(t*w1) - 2*b*w1*cos(t*w1) - 2*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9))*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*b*k3_y*w1**2*sin(t*w1) + 1.41421356237309*b*w1**3*cos(t*w1) - 1.41421356237309*b*w1*cos(t*w1) - 1.41421356237309*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2)**2 + (1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3))) + 0.353553390593274*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1))*(-a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - 1.41421356237309*b*k3_y*w1**2*sin(t*w1) - 1.41421356237309*b*w1**3*cos(t*w1) + 1.41421356237309*b*w1*cos(t*w1) + 1.41421356237309*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2) + 0.25*(1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3))) + 0.353553390593274*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1))*(-2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-2*c*k5_z*w3**2*sin(t*w3) - 4*c*w3**2*sin(t*w3) + 2*k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11) - 1.0*a**2*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - 2.0*(1.4142135623731*a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.4142135623731*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 2*b*k3_y*w1**2*sin(t*w1) + 2*b*w1**3*cos(t*w1) - 2*b*w1*cos(t*w1) - 2*k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9))*(1.41421356237309*Fyhat - a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*a10*x10 - 1.41421356237309*b*w1**2*sin(t*w1) + 1.41421356237309*b*sin(t*w1) + 1.41421356237309*k3_y*(b*w1*cos(t*w1) - x10) + 1.41421356237309*k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - 1.41421356237309*x9)/(a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2)**2 + (1.41421356237309*a*sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(-c*k5_z*w3**3*cos(t*w3) - 2*c*w3**3*cos(t*w3) + k6_z*(-c*k5_z*w3**3*cos(t*w3) - c*w3**3*cos(t*w3))) + 0.707106781186548*a*(-c*k5_z*w3**2*sin(t*w3) - 2*c*w3**2*sin(t*w3) + k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1) + 0.353553390593274*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1) + 0.353553390593274*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(2*a*k1_x*w2**3*sin(t*w2) + 2*a*w2**4*cos(t*w2) - 2*a*w2**2*cos(t*w2) + 2*k2_x*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(2*c*k5_z*w3**2*sin(t*w3) + 4*c*w3**2*sin(t*w3) - 2*k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**3 + 4*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(c*k5_z*w3**3*cos(t*w3) + 2*c*w3**3*cos(t*w3) - k6_z*(-c*k5_z*w3**3*cos(t*w3) - c*w3**3*cos(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**3*cos(t*w1) + b*w1**4*sin(t*w1) - b*w1**2*sin(t*w1) + k4_y*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/sqrt(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1) - 0.0883883476483185*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2/(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)**(3/2))*(1.41421356237309*Fyhat - a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) + 1.41421356237309*a10*x10 - 1.41421356237309*b*w1**2*sin(t*w1) + 1.41421356237309*b*sin(t*w1) + 1.41421356237309*k3_y*(b*w1*cos(t*w1) - x10) + 1.41421356237309*k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - 1.41421356237309*x9)/(2.0*a**2*(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fyhat + 0.707106781186548*a*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2)

  x3d = np.arctan2(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11), 1.41421356237309)

  x3d_dot = 1.41421356237309*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/((Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 2.0)

  x3d_ddot = 1.41421356237309*(a*k1_x*w2**3*sin(t*w2) + a*w2**4*cos(t*w2) - a*w2**2*cos(t*w2) + k2_x*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(2*c*k5_z*w3**2*sin(t*w3) + 4*c*w3**2*sin(t*w3) - 2*k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**3 + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (c*k5_z*w3**3*cos(t*w3) + 2*c*w3**3*cos(t*w3) - k6_z*(-c*k5_z*w3**3*cos(t*w3) - c*w3**3*cos(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**3*cos(t*w1) + b*w1**4*sin(t*w1) - b*w1**2*sin(t*w1) + k4_y*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/((Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 2.0) - 0.353553390593274*(-2*a*k1_x*w2**2*cos(t*w2) + 2*a*w2**3*sin(t*w2) - 2*a*w2*sin(t*w2) + 2*k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + 2*(c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2*(-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(-a*k1_x*w2**2*cos(t*w2) + a*w2**3*sin(t*w2) - a*w2*sin(t*w2) + k2_x*(-a*k1_x*w2*sin(t*w2) - a*w2**2*cos(t*w2)) + (c*k5_z*w3**2*sin(t*w3) + 2*c*w3**2*sin(t*w3) - k6_z*(-c*k5_z*w3**2*sin(t*w3) - c*w3**2*sin(t*w3)))*(Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + (-b*k3_y*w1**2*sin(t*w1) - b*w1**3*cos(t*w1) + b*w1*cos(t*w1) + k4_y*(b*k3_y*w1*cos(t*w1) - b*w1**2*sin(t*w1)))/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))/(0.5*(Fxhat - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fyhat + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1)**2

  U4 = 1.0*(0.5*(Fx - a*w2**2*cos(t*w2) + a*cos(t*w2) + a9*x8 + k1_x*(-a*w2*sin(t*w2) - x8) + k2_x*(-a*w2*sin(t*w2) + k1_x*(a*cos(t*w2) - x7) - x8) - x7 + (Fy + a10*x10 - b*w1**2*sin(t*w1) + b*sin(t*w1) + k3_y*(b*w1*cos(t*w1) - x10) + k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) - x9)/(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11))**2 + 1.0)*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11)**2 + 2.0*(-Fy + 0.707106781186548*a*c*(a11*x12 + 2*c*w3*cos(t*w3) + g + k5_z*(c*w3*cos(t*w3) - x12) + k6_z*(c*w3*cos(t*w3) + k5_z*(c*w3*cos(t*w3) - x11) - x12) - x11) - a10*x10 + b*w1**2*sin(t*w1) - b*sin(t*w1) - k3_y*(b*w1*cos(t*w1) - x10) - k4_y*(b*w1*cos(t*w1) + k3_y*(b*sin(t*w1) - x9) - x10) + x9)**2

  x1_d = np.array([x1d,x1d_dot,x1d_ddot])
  x3_d = np.array([x3d,x3d_dot,x3d_ddot])

  # x1d_data.append(x1d)
  # x3d_data.append(x3d)
  # U4_data.append(U4)

  return x1_d, x3_d, U4

"""# ADAPTATION LAWS"""

def adaptation(t,y, states, x_ref, y_ref, z_ref, x1d, x3d, psi_ref):
  x1 = states[0]
  x2 = states[1]
  x3 = states[2]
  x4 = states[3]
  x5 = states[4]
  x6 = states[5]
  x7 = states[6]
  x8 = states[7]
  x9 = states[8]
  x10 = states[9]
  x11 = states[10]
  x12 = states[11]

  Tau1_hat = y[0]
  Tau2_hat = y[1]
  Fx_hat = y[2]
  Fy_hat = y[3]

  ##......reference states .....##
  x1r = x1d[0]
  x1r_dot = x1d[1]
  x1r_ddot = x1d[2]

  x3r = x3d[0]
  x3r_dot = x3d[1]
  x3r_ddot = x3d[2]

  # x5r = psi_ref[0]
  # x5r_dot = psi_ref[1]
  # x5r_ddot = psi_ref[2]

  x7r = x_ref[0]
  x7r_dot = x_ref[1]
  x7r_ddot = x_ref[2]

  x8r = y_ref[0]
  x8r_dot = y_ref[1]
  x8r_ddot = y_ref[2]

  x9r = z_ref[0]
  x9r_dot = z_ref[1]
  x9r_ddot = z_ref[2]

  ####.............ADAPTATION LAWS ............######
  e1 = x1 - x1r
  x2d = x1r_dot - k1_u1*e1
  z1 = x2 - x2d
  Tau1_hat_dot = -gamma_u1*z1

  e3 = x3 - x3r
  x4d = x3r_dot - k1_u2*e3
  z3 = x4 - x4d
  Tau2_hat_dot = -gamma_u2*z3

  z7 = x7r - x7
  z7_dot = x7r_dot - x8
  v1 = x7r_dot + k1_x*z7
  sp1 = v1 - x8
  Fx_hat_dot = gamma_x*sp1


  z9 = x9r - x9
  z9_dot = x9r_dot - x10
  v3 = x9r_dot + k3_y*z9
  sp2 = v3 - x10
  Fy_hat_dot = gamma_y*sp2

  return Tau1_hat_dot, Tau2_hat_dot, Fx_hat_dot, Fy_hat_dot

"""# SOLVE IVP"""

def step(states,adap, Ts, i):
  x1 = states[0]
  x2 = states[1]
  x3 = states[2]
  x4 = states[3]
  x5 = states[4]
  x6 = states[5]
  x7 = states[6]
  x8 = states[7]
  x9 = states[8]
  x10 = states[9]
  x11 = states[10]
  x12 = states[11]

  ##
  Tau1_hat = adap[0]
  Tau2_hat = adap[1]
  Fx_hat = adap[2]
  Fy_hat = adap[3]

  x_ref, y_ref, z_ref, psi_ref = trajectory(i/10)

  v2, v4, v6, v2hat, v4hat = position(states,adap, x_ref, y_ref, z_ref)

  x1d, x3d, U4 = inverter(i/10, states, adap)

  # print(U4)

  U1, U2, U3 = attitude(states,adap, x1d, x3d, psi_ref)
  ##
  # print([U1],[U2],[U3])

  # U1_data.append(U1)
  # U2_data.append(U2)
  # U3_data.append(U3)

  sol_1 = solve_ivp(lambda t,y:adaptation(t,y,states, x_ref, y_ref, z_ref, x1d, x3d, psi_ref), [0, Ts], [Tau1_hat, Tau2_hat,Fx_hat, Fy_hat], t_eval = np.linspace(0,Ts, 10))
  adap = sol_1.y[:,-1].T

  sol = solve_ivp(lambda t,y:quad_dyna(t, y, x1d, x3d,psi_ref, v2, v4, v6), [0, Ts], [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12], t_eval=np.linspace( 0, Ts, 10))
  states = sol.y[:,-1].T

  return states, adap

"""# range sensor"""

#.......................... range measurement of the all landmarks .....................

def range_sensor(pn, pe, pd,pn_l,pe_l, pd_l):
  rho = []
  for i in range(LN):
    rho.append(np.sqrt((pn_l[i]-pn)**2+(pe_l[i]-pe)**2+(pd_l[i]-pd)**2) + 0.15 * random.random())
  return rho

"""# Simulation setup"""

# function to draw the quad
def build_quad(x7, x9, x11, x1, x3, x5):

  pn = x7
  pe = x9
  pd = -x11
  phi = x1
  theta = x3
  psi = x5

  # define width to use as reference to construct the quad
  w = 0.75

  # defining the coordinates of the end points of the quad rotors
  p1 = np.array([w, 0, 0]).T
  p2 = np.array([-w, 0, 0]).T
  p3 = np.array([0, w, 0]).T
  p4 = np.array([0, -w, 0]).T

  # converting the quadrotor points to interial frame and translating as per ned
  R = rot_mat_bod2veh(phi, theta, psi) # rotational matrix
  pos_ned = np.array([pn, pe, pd]).T #
  p1r = np.matmul(R,p1)+pos_ned
  p2r = np.matmul(R,p2)+pos_ned
  p3r = np.matmul(R,p3)+pos_ned
  p4r = np.matmul(R,p4)+pos_ned

  # changing the orientation of ned wrt yxz
  A = axes_ned2yxz()
  p1ra = np.matmul(A,p1r)
  p2ra = np.matmul(A,p2r)
  p3ra = np.matmul(A,p3r)
  p4ra = np.matmul(A,p4r)

  # Rotor coordinates
  rot_x = [p1ra[0], p2ra[0], p3ra[0], p4ra[0]]
  rot_y = [p1ra[1], p2ra[1], p3ra[1], p4ra[1]]
  rot_z = [p1ra[2], p2ra[2], p3ra[2], p4ra[2]]

  # Arm coordinates
  arm1_x = [p1ra[0], p2ra[0]]
  arm1_y = [p1ra[1], p2ra[1]]
  arm1_z = [p1ra[2], p2ra[2]]

  arm2_x = [p3ra[0], p4ra[0]]
  arm2_y = [p3ra[1], p4ra[1]]
  arm2_z = [p3ra[2], p4ra[2]]

  # defining the coordinates of the payload
  v1 = np.array([-w/3,-w/3,w/2]).T
  v2 = np.array([-w/3,-w/3,0]).T
  v3 = np.array([w/3,-w/3,0]).T
  v4 = np.array([w/3,-w/3,w/2]).T
  v5 = np.array([w/3,w/3,w/2]).T
  v6 = np.array([w/3,w/3,0]).T
  v7 = np.array([-w/3,w/3,0]).T
  v8 = np.array([-w/3,w/3,w/2]).T

  # converting the payload points to interial frame and translating as per ned
  v1r = np.matmul(R,v1)+pos_ned
  v2r = np.matmul(R,v2)+pos_ned
  v3r = np.matmul(R,v3)+pos_ned
  v4r = np.matmul(R,v4)+pos_ned
  v5r = np.matmul(R,v5)+pos_ned
  v6r = np.matmul(R,v6)+pos_ned
  v7r = np.matmul(R,v7)+pos_ned
  v8r = np.matmul(R,v8)+pos_ned

  # changing the orientation of ned wrt yxz
  v1ra = np.matmul(A,v1r)
  v2ra = np.matmul(A,v2r)
  v3ra = np.matmul(A,v3r)
  v4ra = np.matmul(A,v4r)
  v5ra = np.matmul(A,v5r)
  v6ra = np.matmul(A,v6r)
  v7ra = np.matmul(A,v7r)
  v8ra = np.matmul(A,v8r)

  # defining the faces of the payload
  f1_x=[v1ra[0], v2ra[0], v3ra[0], v4ra[0], v1ra[0]]
  f1_y=[v1ra[1], v2ra[1], v3ra[1], v4ra[1], v1ra[1]]
  f1_z=[v1ra[2], v2ra[2], v3ra[2], v4ra[2], v1ra[2]]
  f2_x=[v5ra[0], v6ra[0], v7ra[0], v8ra[0], v5ra[0]]
  f2_y=[v5ra[1], v6ra[1], v7ra[1], v8ra[1], v5ra[1]]
  f2_z=[v5ra[2], v6ra[2], v7ra[2], v8ra[2], v5ra[2]]
  f3_x=[v4ra[0], v5ra[0], v6ra[0], v3ra[0], v4ra[0]]
  f3_y=[v4ra[1], v5ra[1], v6ra[1], v3ra[1], v4ra[1]]
  f3_z=[v4ra[2], v5ra[2], v6ra[2], v3ra[2], v4ra[2]]
  f4_x=[v1ra[0], v8ra[0], v7ra[0], v2ra[0], v1ra[0]]
  f4_y=[v1ra[1], v8ra[1], v7ra[1], v2ra[1], v1ra[1]]
  f4_z=[v1ra[2], v8ra[2], v7ra[2], v2ra[2], v1ra[2]]

  return rot_x, rot_y, rot_z, arm1_x, arm1_y, arm1_z, arm2_x, arm2_y, arm2_z, f1_x, f1_y, f1_z, f2_x, f2_y, f2_z, f3_x, f3_y, f3_z, f4_x, f4_y, f4_z

# Intial Plot
fig = plt.figure(figsize=(7,7), dpi=90)
ax = fig.add_subplot(1, 1, 1, projection='3d')
ax.set_xlim((-5, 5))
ax.set_ylim((-5, 5))
ax.set_zlim((-25, 25))
ax.set_xlabel('East(x)')
ax.set_ylabel('North(y)')
ax.set_zlabel('Down(z)')
ax.set_title('Quadrotor Simulation (y:ref, k:true)')

rot_x, rot_y, rot_z, arm1_x, arm1_y, arm1_z, arm2_x, arm2_y, arm2_z, f1_x, f1_y, f1_z, f2_x, f2_y, f2_z, f3_x, f3_y, f3_z, f4_x, f4_y, f4_z = build_quad(x7, x9, x11, x1, x3, x5)

# Collecting data for trajectories and plots
x7_data.append(x7)
x9_data.append(x9)
x11_data.append(x11)

# Creating handles for plotting and animation

# payload
face1, = ax.plot(f1_x, f1_y, f1_z, 'g', lw=1.1)
face2, = ax.plot(f2_x, f2_y, f2_z, 'g', lw=1.1)
face3, = ax.plot(f3_x, f3_y, f3_z, 'g', lw=1.1)
face4, = ax.plot(f4_x, f4_y, f4_z, 'g', lw=1.1)

# arms and rotors
arm1, = ax.plot(arm1_x, arm1_y, arm1_z, 'r-', lw=1.5)
arm2, = ax.plot(arm2_x, arm2_y, arm2_z, 'k-', lw=1.5)
rotor, = ax.plot(rot_x, rot_y, rot_z, 'bo', ms = 2)

# # trajectory
traj, = ax.plot(x9_data, x7_data, x11_data, 'k:', lw=1)
traj_ref, = ax.plot(y_r_data, x_r_data, z_r_data, 'r:', lw=1)
est_traj, = ax.plot(x9hat_data, x7hat_data, x11hat_data, 'm:',lw=1)
ln_pts, = ax.plot(pe_l, pn_l, pd_l,'b*')

"""# EKF Block"""

def drawframe(i):
  global states
  global adap

  global xhat
  global Pt
  global Qu
  global Ru

  states,adap = step(states,adap,dt,i)

  Tau1_hat = adap[0]
  Tau2_hat = adap[1]
  Fx_hat = adap[2]
  Fy_hat = adap[3]

  x_ref, y_ref, z_ref, psi_ref = trajectory(i/10)

  v2, v4, v6, v2hat, v4hat = position(states,adap, x_ref, y_ref, z_ref)

  x1d, x3d, U4 = inverter(i/10, states, adap)

  U1, U2, U3 = attitude(states,adap, x1d, x3d, psi_ref)

  # reference traj
  x7r = x_ref[0]
  x7r_dot = x_ref[1]
  x7r_ddot = x_ref[2]

  x9r = y_ref[0]
  x9r_dot = y_ref[1]
  x9r_ddot = y_ref[2]

  x11r = z_ref[0]
  x11r_dot = z_ref[1]
  x11r_ddot = z_ref[2]

  ###
  x1 = states[0]
  x2 = states[1]
  x3 = states[2]
  x4 = states[3]
  x5 = states[4]
  x6 = states[5]
  x7 = states[6]
  x8 = states[7]
  x9 = states[8]
  x10 = states[9]
  x11 = states[10]
  x12 = states[11]

  Tau1_hat = adap[0]
  Tau2_hat = adap[1]
  Fx_hat = adap[2]
  Fy_hat = adap[3]

  # states to be estimated

  [x1hat] = xhat[0]
  [x2hat] = xhat[1]
  [x3hat] = xhat[2]
  [x4hat] = xhat[3]
  [x5hat] = xhat[4]     #psi
  [x6hat] = xhat[5]     #psi dot
  [x7hat] = xhat[6]     #pn
  [x8hat] = xhat[7]     #pndot
  [x9hat] = xhat[8]     #pe
  [x10hat] = xhat[9]    #pedot
  [x11hat] = xhat[10]    #pd
  [x12hat] = xhat[11]    #pddot

  #Prediction
  e1_dot_hat = -x1d[1] + x2hat
  e1hat = x1d[0] - x1hat
  s1_hat = e1_dot_hat + c1*e1hat
  #
  x1hatdot = x2hat
  x2hatdot = x1d[2] + c1*e1_dot_hat + k1_u1*np.sign(s1_hat)

  e3hat = -x3d[0] +x3hat
  e3_dot_hat = x3d[1] - x4hat
  s2 = e3_dot_hat + c2*e3hat
  x3hatdot = x4hat
  x4hatdot = x3d[2] + c2*e3_dot_hat + k1_u2*np.sign(s2)

  e5hat = -psi_ref[0] + x5hat
  e5_dot_hat= psi_ref[1] - x6hat
  s3hat = e5_dot_hat + c3*e5hat
  x5hatdot = x6hat
  x6hatdot = psi_ref[2] + c3*e5_dot_hat + k1_u3*np.sign(s3hat)

  x7hatdot = x8hat
  z7_hat = x7r - x7hat
  z7_hat_dot = x7r_dot - x8hat
  v1_hat = x7r_dot + k1_x*z7_hat
  sp1_hat = v1_hat - x8hat
  v2hat = z7_hat + x7r_ddot + k1_x*z7_hat_dot + a9*x8hat + k2_x*sp1_hat
  x8hatdot = v2hat - a9*x8hat

  x9hatdot = x10hat
  z9hat = x9r - x9hat
  z9hat_dot = x9r_dot - x10hat
  v3hat = x9r_dot + k3_y*z9hat
  sp2hat = v3hat - x10hat
  v4hat = z9hat + x9r_ddot + k3_y*z9hat_dot + a10*x10hat + k4_y*sp2hat
  x10hatdot = v4hat -a10*x10hat

  x11hatdot = x12hat
  z11hat = x11r - x11hat
  z11hat_dot = x11r_dot - x12hat
  v5hat = x11r_dot + k5_z*z11hat
  sp3hat = v5hat - x12hat
  v6hat = z11hat + x11r_dot + k5_z*z11hat_dot + g + a11*x12hat + k6_z*sp3hat
  x12hatdot = -g + v6hat - a11*x12hat

  xhat_dot = np.array([[x1hatdot],
                       [x2hatdot],
                       [x3hatdot],
                       [x4hatdot],
                       [x5hatdot],
                       [x6hatdot],
                       [x7hatdot],
                       [x8hatdot],
                       [x9hatdot],
                       [x10hatdot],
                       [x11hatdot],
                       [x12hatdot]])

  xhat = xhat + Ts*xhat_dot

  At = np.array([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, c1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, c2, 0, 0, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, c3, 0, 0, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, -a9, 0, 0, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, -a10, 0, 0],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -a11]])

  Pt_dot = np.matmul(At, Pt) + np.matmul(Pt, At.transpose()) + Qu
  Pt = Pt + Ts*Pt_dot

  #### measurement update
  rho = range_sensor(x7,x9,x11, pn_l, pe_l, pd_l)

  for i in range(LN):

      Rho = math.sqrt((x7hat - pn_l[i])**2 + (x9hat - pe_l[i])**2 + (x11hat - pd_l[i])**2)
      Rho_1 = (x7hat - pn_l[i])/Rho
      Rho_2 = (x9hat - pe_l[i])/Rho
      Rho_3 = (x11hat - pd_l[i])/Rho
      C_i = np.array([[0, 0, 0, 0, 0, 0, Rho_1,0, Rho_2,0, Rho_3, 0]])
      temp_1 = np.matmul(C_i,Pt)
      temp_2 = np.matmul(temp_1, np.transpose(C_i))
      RT = np.array(Ru + temp_2)
      # temp_3 = np.linalg.inv(RT)
      temp_3 = 1/(RT)
      temp_4 = np.matmul(np.transpose(C_i),temp_3)

      Li = np.matmul(Pt, temp_4)
      drho = rho[i] - Rho

      ### Q adaptation
      # T1 = np.matmul(At,Pt)
      # T2 = np.matmul(T1,np.transpose(At))
      # T3 = np.matmul(C_i,T2)
      # T4 = np.matmul(T3,np.transpose(C_i))
      # T5 = np.matmul(C_i,Qu)
      # T6 = np.matmul(T5,np.transpose(C_i))
      # T7 = 1/T6
      # Yk = (drho**2 -T4- Ru)*T7
      # Yk1 = np.maximum(np.eye(1),Yk)
      # Qu1 = Yk*Qu
      # Qu = Qu1

      #### R adaptation ########

      Sk = ((drho**2) - temp_2)*temp_3
      Sk1 = np.maximum(np.eye(1),Sk)
      R = np.matmul(Sk1,Ru) + temp_2
      r_inv = 1/(R)
      temp_r = np.matmul(np.transpose(C_i),r_inv)
      # Ru1 = Sk1*Ru
      # Ru = Ru1
      # new kalman gain
      Lii = np.matmul(Pt,temp_r)

      #state update
      xhat = xhat + drho * Lii

      [x1hat] = xhat[0]
      [x2hat] = xhat[1]
      [x3hat] = xhat[2]
      [x4hat] = xhat[3]
      [x5hat] = xhat[4]     #psi
      [x6hat] = xhat[5]     #psi dot
      [x7hat] = xhat[6]     #pn
      [x8hat] = xhat[7]     #pndot
      [x9hat] = xhat[8]     #pe
      [x10hat] = xhat[9]    #pedot
      [x11hat] = xhat[10]    #pd
      [x12hat] = xhat[11]    #pddot

      temp_5 = np.matmul(Lii,C_i)
      temp_6 = np.identity(12) - temp_5
      #covariance update
      Pt = np.matmul(temp_6, Pt)

  ##
  x1hat_data.append(x1hat)
  x2hat_data.append(x2hat)
  x3hat_data.append(x3hat)
  x4hat_data.append(x4hat)
  x5hat_data.append(x5hat)
  x6hat_data.append(x6hat)
  x7hat_data.append(x7hat)
  x8hat_data.append(x8hat)
  x9hat_data.append(x9hat)
  x10hat_data.append(x10hat)
  x11hat_data.append(x11hat)
  x12hat_data.append(x12hat)

  Sk_data.append(Sk1*Ru)
  # Sk1_data.append(Sk1)
  one_data.append([0.1])

  # 3 sigma bounds
  # cov_x1_data.append(3*math.sqrt(Pt[0,0]))
  # cov_x2_data.append(3*math.sqrt(Pt[1,1]))
  # cov_x3_data.append(3*math.sqrt(Pt[2,2]))
  # cov_x4_data.append(3*math.sqrt(Pt[3,3]))
  cov_x5_data.append(3*math.sqrt(Pt[4,4]))
  # cov_x6_data.append(3*math.sqrt(Pt[5,5]))
  cov_x7_data.append(3*math.sqrt(Pt[6,6]))
  cov_x8_data.append(3*math.sqrt(Pt[7,7]))
  cov_x9_data.append(3*math.sqrt(Pt[8,8]))
  cov_x10_data.append(3*math.sqrt(Pt[9,9]))
  cov_x11_data.append(3*math.sqrt(Pt[10,10]))
  cov_x11_data.append(3*math.sqrt(Pt[10,10]))

  # # '....'
  # cov3x1_data_2.append(-3*math.sqrt(Pt[0,0]))
  # cov3x2_data_2.append(-3*math.sqrt(Pt[1,1]))
  # cov3x3_data_2.append(-3*math.sqrt(Pt[2,2]))
  # cov3x4_data_2.append(-3*math.sqrt(Pt[3,3]))
  cov3x5_data_2.append(-3*math.sqrt(Pt[4,4]))
  # cov3x6_data_2.append(-3*math.sqrt(Pt[5,5]))
  cov3x7_data_2.append(-3*math.sqrt(Pt[6,6]))
  cov3x8_data_2.append(-3*math.sqrt(Pt[7,7]))
  cov3x9_data_2.append(-3*math.sqrt(Pt[8,8]))
  cov3x10_data_2.append(-3*math.sqrt(Pt[9,9]))
  cov3x11_data_2.append(-3*math.sqrt(Pt[10,10]))
  cov3x12_data_2.append(-3*math.sqrt(Pt[11,11]))

  ex1_data.append(x1 - x1hat)
  ex2_data.append(x2 -x2hat)
  ex3_data.append(x3 - x3hat)
  ex4_data.append(x4 - x4hat)
  ex5_data.append(x5 - x5hat)
  ex6_data.append(x6 - x6hat)
  ex7_data.append(x7 - x7hat)
  ex8_data.append(x8 - x8hat)
  ex9_data.append(x9 - x9hat)
  ex10_data.append(x10 - x10hat)
  ex11_data.append(x11 - x11hat)
  ex12_data.append(x12 - x12hat)

  x_r_data.append(x_ref[0])
  y_r_data.append(y_ref[0])
  z_r_data.append(z_ref[0])

  x1_data.append(x1)
  x2_data.append(x2)
  x3_data.append(x3)
  x4_data.append(x4)
  x5_data.append(x5)
  x6_data.append(x6)
  x7_data.append(x7)
  x8_data.append(x8)
  x9_data.append(x9)
  x10_data.append(x10)
  x11_data.append(x11)
  x12_data.append(x12)

  Tau1_hat_data.append(Tau1_hat)
  Tau2_hat_data.append(Tau2_hat)
  Fxhat_data.append(Fx_hat)
  Fyhat_data.append(Fy_hat)

  x1d_data.append(x1d[0])
  x3d_data.append(x3d[0])
  U4_data.append(U4)

  # x_r_data.append(x_ref[0])
  # y_r_data.append(y_ref[0])
  # z_r_data.append(z_ref[0])
  # psi_r_data.append(psi_ref[0])

  U1_data.append(U1)
  U2_data.append(U2)
  U3_data.append(U3)

  rot_x, rot_y, rot_z, arm1_x, arm1_y, arm1_z, arm2_x, arm2_y, arm2_z, f1_x, f1_y, f1_z, f2_x, f2_y, f2_z, f3_x, f3_y, f3_z, f4_x, f4_y, f4_z = build_quad(x7, x9, x11, x1, x3, x5)

  face1.set_data(f1_x, f1_y)
  face1.set_3d_properties(f1_z)
  face2.set_data(f2_x, f2_y)
  face2.set_3d_properties(f2_z)
  face3.set_data(f3_x, f3_y)
  face3.set_3d_properties(f3_z)
  face4.set_data(f4_x, f4_y)
  face4.set_3d_properties(f3_z)

  arm1.set_data(arm1_x, arm1_y)
  arm1.set_3d_properties(arm1_z)
  arm2.set_data(arm2_x, arm2_y)
  arm2.set_3d_properties(arm2_z)
  rotor.set_data(rot_x, rot_y)
  rotor.set_3d_properties(rot_z)

  ln_pts.set_data(pe_l, pn_l)
  ln_pts.set_3d_properties(pd_l)

  traj.set_data(x9_data, x7_data)
  traj.set_3d_properties(x11_data)

  traj_ref.set_data(y_r_data, x_r_data)
  traj_ref.set_3d_properties(z_r_data)

  est_traj.set_data(x9hat_data, x7hat_data)
  est_traj.set_3d_properties(x11hat_data)


  return face1, face2, face3, face4, arm1, arm2, rotor, traj, traj_ref, est_traj, ln_pts

# for i in range(frames):
#   drawframe(i)

"""# create a simulation"""

# Creating the Simulatiom
ax.set_xlabel('East(x)')
ax.set_ylabel('North(y)')
ax.set_zlabel('Down(z)')
ax.set_title('Quadrotor Simulation (y:ref, k:true, m:est)')
# blit=True re-draws only the parts that have changed.
anim = animation.FuncAnimation(fig, drawframe, frames=frames, interval=40, blit=True)

# # Converting the animated result into a  html5 video for visualization
HTML(anim.to_html5_video())

"""# Results

## plots- adaptive control with wind stuff
"""

fig1 = plt.figure(figsize=(20,20))
ax1 = fig1.add_subplot(4, 3, 1)
ax1.set_xlabel('Time Step')
ax1.set_ylabel('Pn')
ax1.set_title('State Plot of North (k:true, r:ref)')
pn1 = ax1.plot(range(len(x7_data)),x7_data,'k', label = "P_north")
pn1 = ax1.plot(range(len(x_r_data)),x_r_data, 'r:', label = "pn ref")
pn1 = ax1.plot(range(len(x7hat_data)),x7hat_data,'m:',label = 'pn est')
ax1.legend(loc = "upper right")

ax2 = fig1.add_subplot(4, 3, 2)
ax2.set_xlabel('Time Step')
ax2.set_ylabel('Pe')
ax2.set_title('State Plot of East (k:true, r:ref)')
pn1 = ax2.plot(range(len(x9_data)),x9_data,'k', label = "pe")
pn1 = ax2.plot(range(len(y_r_data)),y_r_data, 'r:', label = "pe ref")
pn1 = ax2.plot(range(len(x9hat_data)),x9hat_data,'m:',label = 'pe est')
ax2.legend(loc = "upper right")

ax3 = fig1.add_subplot(4, 3, 3)
ax3.set_xlabel('Time Step')
ax3.set_ylabel('Pd')
ax3.set_title('State Plot of Down (k:true, r:ref)')
pn1 = ax3.plot(range(len(x11_data)),x11_data,'k', label = "pd")
# pn1 = ax3.plot(range(len(z_r_data)),z_r_data, 'r:', label = "Down_ref")
pn1 = ax3.plot(range(len(x11hat_data)),x11hat_data,'m:',label = 'pd est')
ax3.legend(loc = "upper right")

ax4 = fig1.add_subplot(4, 3, 4)
ax4.set_xlabel('Time Step')
ax4.set_ylabel('Phi')
ax4.set_title('State Plot of Phi (k:true, r:ref)')
pn1 = ax4.plot(range(len(x1_data)),x1_data,'k', label = "Phi")
pn1 = ax4.plot(range(len(x1d_data)),x1d_data, 'r:', label = "phi desired")
ax4.legend(loc = "upper right")

ax5 = fig1.add_subplot(4, 3, 5)
ax5.set_xlabel('Time Step')
ax5.set_ylabel('Theta')
ax5.set_title('State Plot of Theta (k:true, r:ref)')
pn1 = ax5.plot(range(len(x3_data)),x3_data,'k', label = "Theta")
pn1 = ax5.plot(range(len(x3d_data)),x3d_data, 'r:', label = "Theta desired")
ax5.legend(loc = "upper right")

ax6 = fig1.add_subplot(4, 3, 6)
ax6.set_xlabel('Time Step')
ax6.set_ylabel('Psi')
ax6.set_title('State Plot of Psi (k:true, r:ref)')
pn1 = ax6.plot(range(len(x5_data)),x5_data,'k', label = "Psi")
pn1 = ax6.plot(range(len(psi_r_data)),psi_r_data, 'r:', label = "Psi ref")
pn1 = ax6.plot(range(len(x5hat_data)),x6hat_data,'m:',label = 'psi est')
ax6.legend(loc = "upper right")

fig3 = plt.figure(figsize=(30,20))
ax7 = fig3.add_subplot(4, 3, 1)
ax7.set_xlabel('Time Step')
ax7.set_ylabel('U1')
ax7.set_title('Plot of U1')
pn1 = ax7.plot(range(len(U1_data)),U1_data,'k', label = "U1")
ax7.legend(loc = "best")

ax8 = fig3.add_subplot(4, 3, 2)
ax8.set_xlabel('Time Step')
ax8.set_ylabel('U2')
ax8.set_title('Plot of U2')
pn1 = ax8.plot(range(len(U2_data)),U2_data,'k',label = "U2")
ax8.legend(loc = "best")

ax9 = fig3.add_subplot(4, 3, 4)
ax9.set_xlabel('Time Step')
ax9.set_ylabel('U3')
ax9.set_title('Plot of U3')
pn1 = ax9.plot(range(len(U3_data)),U3_data,'k', label = "U3")
ax9.legend(loc = "best")

ax10 = fig3.add_subplot(4, 3, 5)
ax10.set_xlabel('Time Step')
ax10.set_ylabel('U4')
ax10.set_title('Plot of U4')
pn1 = ax10.plot(range(len(U4_data)),U4_data,'k',label = "U4")
ax10.legend(loc = "best")

fig4 = plt.figure(figsize=(40,40))
ax11 = fig4.add_subplot(4, 3, 1,projection='3d')
pn1 = ax11.plot(x7_data, x9_data, x11_data,'k',label='actual traj')
# pn1 = ax11.plot(x_r_data, y_r_data, z_r_data,'r:',label='ref traj')
pn1 = ax11.plot(x7hat_data, x9hat_data, x11hat_data,'m',label='est traj')
ax11.legend(loc='best')

"""## Tau and F hat plots - wind disturbance"""

fig2 = plt.figure(figsize=(30,30))
ax11 = fig2.add_subplot(5, 3, 1)
ax11.set_xlabel('Timestep')
ax11.set_ylabel('Fxhat')
ax11.set_title('Plot of Fxhat')
pn1 = ax11.plot(range(len(Fxhat_data)),Fxhat_data,'k',label = "Fxhat")


ax12 = fig2.add_subplot(5, 3, 2)
ax12.set_xlabel('Timestep')
ax12.set_ylabel('Fyhat')
ax12.set_title('Plot of Fyhat')
pn1 = ax12.plot(range(len(Fyhat_data)),Fyhat_data,'k',label = "Fyhat")

ax13 = fig2.add_subplot(5, 3, 4)
ax13.set_xlabel('Timestep')
ax13.set_ylabel('Tau1 hat')
ax13.set_title('Plot of Tau1 hat')
pn1 = ax13.plot(range(len(Tau1_hat_data)),Tau1_hat_data,'k',label = "Tau1_hat")

ax14 = fig2.add_subplot(5 ,3, 5)
ax14.set_xlabel('Timestep')
ax14.set_ylabel('Tau2 hat')
ax14.set_title('Plot of Tau2 hat')
pn1 = ax14.plot(range(len(Tau1_hat_data)),Tau1_hat_data,'k',label = "Tau2_hat")

"""## error states vs 3*sqrt cov bounds"""

fig3 = plt.figure(figsize=(20,45))

ax1 = fig3.add_subplot(8, 2, 1)
ax1.set_xlabel('timestep')
ax1.set_ylabel('Error cov Pn')
ax1.set_title('PN cov vs t')
my_array1 = np.array(cov3x7_data_2)
my_array11 = (-1)*my_array1
cov3_x7_data = my_array11.tolist()
PC1 = ax1.plot(range(len(ex7_data)),ex7_data,'r')
PC11 = ax1.plot(range(len(cov3_x7_data)),cov3_x7_data,'b')
PC111 = ax1.plot(range(len(cov3x7_data_2)),cov3x7_data_2,'b')

ax2 = fig3.add_subplot(8, 2, 2)
ax2.set_xlabel('timestep')
ax2.set_ylabel('Error cov Pe')
ax2.set_title('PE cov vs t')
my_array2 = np.array(cov3x9_data_2)
my_array12 = (-1)*my_array2
cov3_x9_data = my_array12.tolist()
PC2 = ax2.plot(range(len(ex9_data)),ex9_data,'r')
PC21 = ax2.plot(range(len(cov3_x9_data)),cov3_x9_data,'b')
PC211 = ax2.plot(range(len(cov3x9_data_2)),cov3x9_data_2,'b')

ax3 = fig3.add_subplot(8, 2, 3)
ax3.set_xlabel('timestep')
ax3.set_ylabel('Error cov Pd')
ax3.set_title('PD cov vs t')
my_array3 = np.array(cov3x11_data_2)
my_array13 = (-1)*my_array3
cov3_x11_data = my_array13.tolist()
PC3 = ax3.plot(range(len(ex11_data)),ex11_data,'r')
PC31 = ax3.plot(range(len(cov3_x11_data)),cov3_x11_data,'b')
PC311 = ax3.plot(range(len(cov3x11_data_2)),cov3x11_data_2,'b')

ax4 = fig3.add_subplot(8, 2, 4)
ax4.set_xlabel('timestep')
ax4.set_ylabel('Error cov Psi')
ax4.set_title('Psi cov vs t')
my_array3 = np.array(cov3x5_data_2)
my_array13 = (-1)*my_array3
cov3_x5_data = my_array13.tolist()
PC4 = ax4.plot(range(len(ex5_data)),ex5_data,'r')
PC41 = ax4.plot(range(len(cov3_x5_data)),cov3_x5_data,'b')
PC411 = ax4.plot(range(len(cov3x5_data_2)),cov3x5_data_2,'b')

ax5 = fig3.add_subplot(8, 2, 5)
ax5.set_xlabel('timestep')
ax5.set_ylabel('Error cov U')
ax5.set_title('U cov vs t')
my_array3 = np.array(cov3x8_data_2)
my_array13 = (-1)*my_array3
cov3_x8_data = my_array13.tolist()
PC5 = ax5.plot(range(len(ex8_data)),ex8_data,'r')
PC51 = ax5.plot(range(len(cov3_x8_data)),cov3_x8_data,'b')
PC511 = ax5.plot(range(len(cov3x8_data_2)),cov3x8_data_2,'b')

ax6 = fig3.add_subplot(8, 2, 6)
ax6.set_xlabel('timestep')
ax6.set_ylabel('Error cov V')
ax6.set_title('V cov vs t')
my_array3 = np.array(cov3x10_data_2)
my_array13 = (-1)*my_array3
cov3_x10_data = my_array13.tolist()
PC6 = ax6.plot(range(len(ex10_data)),ex8_data,'r')
PC61 = ax6.plot(range(len(cov3_x10_data)),cov3_x10_data,'b')
PC611 = ax6.plot(range(len(cov3x10_data_2)),cov3x10_data_2,'b')

ax7 = fig3.add_subplot(8, 2, 7)
ax7.set_xlabel('timestep')
ax7.set_ylabel('Error cov W')
ax7.set_title('W cov vs t')
my_array3 = np.array(cov3x12_data_2)
my_array13 = (-1)*my_array3
cov3_x12_data = my_array13.tolist()
PC7 = ax7.plot(range(len(ex12_data)),ex12_data,'r')
PC71 = ax7.plot(range(len(cov3_x12_data)),cov3_x12_data,'b')
PC711 = ax7.plot(range(len(cov3x12_data_2)),cov3x12_data_2,'b')

# print(Sk_data)

ax8 = fig3.add_subplot(8,2,8)
ax8.set_xlabel('timestep')
ax8.set_ylabel('Sk')
ax8.set_title('Sk vs t')

# my_array3 = np.array(Sk1_data)
# my_array13 = (-1)*my_array3
# Sk1_data = my_array13.tolist()

# Pc8 = ax8.plot(range(len(Sk_data)),Sk_data,'r')
# Pc88 = ax8.plot(range(len(Sk1_data)),Sk1_data,'b')
# Pc888 = ax8.plot(one_data,'k')

a  = np.asarray(Sk_data)
a1 = a.ravel()
a2 = a1.reshape([len(a),1])

# b = np.asarray(Sk1_data)
# b1 = b.ravel()
# b2 = b1.reshape([len(b),1])
# print(Sk1_data)
Pc8 = ax8.plot(range(len(a2)),a2,'r')
Pc8 = ax8.plot(range(len(one_data)),one_data,'b')
# Pc89 = ax8.plot(range(len(b2)),b2,'b')